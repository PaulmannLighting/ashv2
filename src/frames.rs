use crate::protocol::{Stuffing, FLAG};
use crate::types::FrameBuffer;
use crate::types::Payload;

/// A trait for iterating over `ASHv2` encoded frames.
pub trait Frames: Iterator<Item = u8> {
    /// Returns an iterator over the payload frames.
    fn frames(&mut self) -> PayloadIterator<&mut Self> {
        PayloadIterator {
            iterator: self,
            buffer: FrameBuffer::new(),
        }
    }
}

impl<T> Frames for T where T: Iterator<Item = u8> {}

/// An iterator over `ASHv2` encoded payload frames.
pub struct PayloadIterator<T>
where
    T: Iterator<Item = u8>,
{
    iterator: T,
    buffer: FrameBuffer,
}

impl<T> Iterator for PayloadIterator<T>
where
    T: Iterator<Item = u8>,
{
    type Item = Payload;

    fn next(&mut self) -> Option<Self::Item> {
        self.buffer.clear();

        loop {
            match self.iterator.next()? {
                FLAG => {
                    self.buffer.unstuff();
                    let mut payload = Payload::new();
                    payload.extend_from_slice(&self.buffer).ok()?;
                    return Some(payload);
                }
                other => {
                    self.buffer.push(other).ok()?;
                    continue;
                }
            }
        }
    }
}

#[cfg(test)]
mod tests {
    use crate::Frames;

    #[test]
    fn test_frames() {
        let buffer = [
            0xA9, 0xD5, 0x2A, 0xBC, 0xF3, 0x7D, 0x38, 0xD5, 0x0B, 0x64, 0xEB, 0x14, 0xD3, 0x08,
            0xDD, 0x0F, 0x66, 0xEA, 0xAC, 0x8F, 0x26, 0xCA, 0xBC, 0x87, 0x22, 0xC8, 0xBD, 0x3F,
            0x7D, 0x5E, 0xE6, 0xAA, 0x8C, 0x9F, 0x2E, 0xCE, 0xBE, 0x86, 0x99, 0x97, 0x90, 0x2B,
            0xCE, 0x04, 0x61, 0xEB, 0xAE, 0x34, 0x79, 0xE7, 0xA8, 0x37, 0xC0, 0x03, 0xDA, 0x0E,
            0x64, 0x51, 0xF3, 0xA2, 0x32, 0x7A, 0x5E, 0x4C, 0x45, 0xF9, 0xA7, 0x88, 0x27, 0xC8,
            0x07, 0xD8, 0x0E, 0xDD, 0x0C, 0xDC, 0xB4, 0x80, 0x9A, 0x97, 0x29, 0x76, 0xE1, 0x12,
            0xD3, 0x0B, 0x67, 0x51, 0x4A, 0xFF, 0x1D, 0x6C, 0xEC, 0xAC, 0x8C, 0x9C, 0x94, 0x90,
            0x95, 0x94, 0x2C, 0x70, 0x5E, 0x49, 0xFA, 0x1B, 0xD3, 0xB7, 0x85, 0x9C, 0x28, 0x72,
            0x5F, 0xF1, 0xA6, 0x35, 0xC4, 0x04, 0x64, 0x54, 0x4C, 0x40, 0x46, 0x45, 0xFC, 0x7D,
            0x38, 0x6A, 0x53, 0x7E, 0xA9, 0xD5, 0x2A, 0x50, 0xF7, 0x1C, 0xD1, 0x0F, 0x60, 0xEF,
            0x10, 0xD7, 0x0C, 0xD9, 0x0B, 0x62, 0xEE, 0xA8, 0x8B, 0x22, 0xCE, 0xB8, 0x83, 0x26,
            0xCC, 0xB9, 0x3B, 0x7A, 0xE2, 0xAE, 0x88, 0x9B, 0x2A, 0xCA, 0xBA, 0x82, 0x9E, 0x90,
            0x97, 0x2C, 0xC9, 0x03, 0x66, 0xEC, 0xA9, 0x33, 0x7D, 0x5E, 0xE0, 0xAF, 0x30, 0x7E,
        ];
        let frames: &[&[u8]] = &[
            &[
                0xA9, 0xD5, 0x2A, 0xBC, 0xF3, 0x18, 0xD5, 0x0B, 0x64, 0xEB, 0x14, 0xD3, 0x08, 0xDD,
                0x0F, 0x66, 0xEA, 0xAC, 0x8F, 0x26, 0xCA, 0xBC, 0x87, 0x22, 0xC8, 0xBD, 0x3F, 0x7E,
                0xE6, 0xAA, 0x8C, 0x9F, 0x2E, 0xCE, 0xBE, 0x86, 0x99, 0x97, 0x90, 0x2B, 0xCE, 0x04,
                0x61, 0xEB, 0xAE, 0x34, 0x79, 0xE7, 0xA8, 0x37, 0xC0, 0x03, 0xDA, 0x0E, 0x64, 0x51,
                0xF3, 0xA2, 0x32, 0x7A, 0x5E, 0x4C, 0x45, 0xF9, 0xA7, 0x88, 0x27, 0xC8, 0x07, 0xD8,
                0x0E, 0xDD, 0x0C, 0xDC, 0xB4, 0x80, 0x9A, 0x97, 0x29, 0x76, 0xE1, 0x12, 0xD3, 0x0B,
                0x67, 0x51, 0x4A, 0xFF, 0x1D, 0x6C, 0xEC, 0xAC, 0x8C, 0x9C, 0x94, 0x90, 0x95, 0x94,
                0x2C, 0x70, 0x5E, 0x49, 0xFA, 0x1B, 0xD3, 0xB7, 0x85, 0x9C, 0x28, 0x72, 0x5F, 0xF1,
                0xA6, 0x35, 0xC4, 0x04, 0x64, 0x54, 0x4C, 0x40, 0x46, 0x45, 0xFC, 0x18, 0x6A, 0x53,
            ],
            &[
                0xA9, 0xD5, 0x2A, 0x50, 0xF7, 0x1C, 0xD1, 0x0F, 0x60, 0xEF, 0x10, 0xD7, 0x0C, 0xD9,
                0x0B, 0x62, 0xEE, 0xA8, 0x8B, 0x22, 0xCE, 0xB8, 0x83, 0x26, 0xCC, 0xB9, 0x3B, 0x7A,
                0xE2, 0xAE, 0x88, 0x9B, 0x2A, 0xCA, 0xBA, 0x82, 0x9E, 0x90, 0x97, 0x2C, 0xC9, 0x03,
                0x66, 0xEC, 0xA9, 0x33, 0x7E, 0xE0, 0xAF, 0x30,
            ],
        ];

        for (parsed, target) in buffer.iter().copied().frames().zip(frames.iter().copied()) {
            assert_eq!(parsed.as_slice(), target);
        }
    }
}
